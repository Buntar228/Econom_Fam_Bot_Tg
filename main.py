import pandas as pd
from aiogram import Bot, executor, Dispatcher, types
from Main_kb import kb_main, pic_keyboard, psychology_answer_kb, psychology_order_confirmation_kb
from Take_user_name_inline_kb import take_user_name_kb
from Prepodi_inline_kb import prepodi_kb
from Free_room_kb import *
from Meropriatia_kb import meropriatia_kb
from Json_data import sched_w_st, data_all_teachers_and_mails
from Google_sheet import *
from tests import teachers_dict_1, dict_of_teachers, final_data_of_teachers_to_find
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from sercher_cacsa import get_schedule
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import date
from kabs_data_and_logic import list_of_kabs_first_flour, list_of_kabs_second_flour, \
    list_of_kabs_third_flour, list_of_kabs_fourth_flour, list_of_kabs_fith_flour

TOKEN_API = '6431263054:AAEhJ6tGq0YTFBHFQf_8sIpMMiEJycYU_Dg'


bot = Bot(TOKEN_API)
dp = Dispatcher(bot)


user_name = ''

buttons_keys = [
    '–°—Ä–µ–¥–∞ 27 –Ω–æ—è–±—Ä—è 2024, 12:00', '–°—Ä–µ–¥–∞ 27 –Ω–æ—è–±—Ä—è 2024, 13:00',
    '–°—Ä–µ–¥–∞ 4 –¥–µ–∫–∞–±—Ä—è 2024, 12:00', '–°—Ä–µ–¥–∞ 4 –¥–µ–∫–∞–±—Ä—è 2024, 13:00',
    '–°—Ä–µ–¥–∞ 11 –¥–µ–∫–∞–±—Ä—è 2024, 12:00', '–°—Ä–µ–¥–∞ 11 –¥–µ–∫–∞–±—Ä—è 2024, 13:00',
    '–°—Ä–µ–¥–∞ 18 –¥–µ–∫–∞–±—Ä—è 2024, 12:00', '–°—Ä–µ–¥–∞ 18 –¥–µ–∫–∞–±—Ä—è 2024, 13:00',
    '–°—Ä–µ–¥–∞ 25 –¥–µ–∫–∞–±—Ä—è 2024, 12:00', '–°—Ä–µ–¥–∞ 25 –¥–µ–∫–∞–±—Ä—è 2024, 13:00'
]
buttons_values = [
    datetime.strptime('2024-11-27', '%Y-%m-%d'), datetime.strptime('2024-11-27', '%Y-%m-%d'),
    datetime.strptime('2024-12-04', '%Y-%m-%d'), datetime.strptime('2024-12-04', '%Y-%m-%d'),
    datetime.strptime('2024-12-11', '%Y-%m-%d'), datetime.strptime('2024-12-11', '%Y-%m-%d'),
    datetime.strptime('2024-12-18', '%Y-%m-%d'), datetime.strptime('2024-11-18', '%Y-%m-%d'),
    datetime.strptime('2024-12-25', '%Y-%m-%d'), datetime.strptime('2024-12-25', '%Y-%m-%d')    
]
buttons_dict = dict(zip(buttons_keys, buttons_values))
buttons_dict_copy = buttons_dict.copy()
psychologist = ['–ü–æ–ª–∏–Ω–∞ –ß–∏–±–∏—Å–æ–≤–∞', '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è']
list_for_google_sheet = []
list_for_das = []


async def on_startup(_):
    print('Bot started')


async def feedback_message(chat_id, users_name, kb):
    await bot.send_message(chat_id=739380400,
                           text=f'–£–≤–∞–∂–∞–µ–º–∞—è –ü–æ–ª–∏–Ω–∞, {users_name} —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–¥—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ . –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å¬ª.\n\n'
                                f'<b>–¢–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º</b> —Å–ª—É—á–∞–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å <b>–∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ</b>!',
                           parse_mode="HTML",
                           reply_markup=kb)




async def job(chat_id, users_name, session_date, kb):
    await bot.send_message(chat_id=chat_id,
                           text=f'–£–≤–∞–∂–∞–µ–º—ã–π <b>{users_name}</b>, \n–Ω–∞–ø–æ–º–∏–Ω–∞—é –≤–∞–º –æ –∑–∞–ø–∏—Å–∏ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n'
                                f'–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ <b>{session_date}</b>, \n–∂–¥–µ–º –≤–∞—Å –≤ <b>321 –∫–∞–±–∏–Ω–µ—Ç–µ</b> üòäüòäüòä.',
                           parse_mode="HTML",
                           reply_markup=kb)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    telegram_user_name = message.from_user.full_name
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://www.econ.msu.ru/sys/raw.php?o=65079&p=attachment',
                         caption=f'–ü—Ä–∏–≤–µ—Ç, {telegram_user_name}, –º–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –º–Ω–æ—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å'
                                 f'—è!\n\n'
                                 '–î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–µ–±—ã–≤–∞–Ω–∏—é –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ!\n\n'
                                 '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å:\n\n' 
                                 '1. –ü–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n' 
                                 '2. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n' 
                                 '3. –ü–æ–º–æ–≥—É –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ –æ—á–µ–Ω—å).\n\n'
                                 '4. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞.\n\n'
                                 '5. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ –ú–ì–£ —Å –ø–æ–º–æ—â—å—é –Ω–∞'
                                 '—à–µ–≥–æ '
                                 '–ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ì—Ä—É—Å—Ç–∏—Ç—å - –≤—Ä–µ–¥–Ω–æ!\n\n'
                                 '–ß—Ç–æ –±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ \n/description',
                         reply_markup=kb_main)
    await message.delete()


@dp.message_handler(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu_command(message: types.Message) -> None:
    telegram_user_name = message.from_user.full_name
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://www.econ.msu.ru/sys/raw.php?o=65079&p=attachment',
                         caption=f'<b>{telegram_user_name}</b>, –µ—â–µ —Ä–∞–∑ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞–ø–æ–º–Ω—é, —á–µ–º —Å–º–æ–≥—É –≤–∞–º '
                                 f'–ø–æ–º–æ—á—å:\n\n'
                                 '1. –ü–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n' 
                                 '2. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n' 
                                 '3. –ü–æ–º–æ–≥—É –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ –æ—á–µ–Ω—å).\n\n'
                                 '4. –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞.\n\n'
                                 '5. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ –ú–ì–£ —Å –ø–æ–º–æ—â—å—é –Ω–∞'
                                 '—à–µ–≥–æ '
                                 '–ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ì—Ä—É—Å—Ç–∏—Ç—å - –≤—Ä–µ–¥–Ω–æ!\n\n'
                                 '–ß—Ç–æ –±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ \n/description',
                         parse_mode="HTML",
                         reply_markup=kb_main)

    await message.delete()


@dp.message_handler(commands=['description'])
async def help_command(message: types.Message) -> None:
    await bot.send_photo(chat_id=message.from_user.id,
                         caption='–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n' 
                         
                                 '–ö–Ω–æ–ø–∫–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. \n\n'
                                
                                 '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã¬ª –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ '
                                 '–∑–∞–Ω—è—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏. \n\n'
                                    
                                 '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π¬ª –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ø–æ –ø–æ—á—Ç–µ '
                                 '–∏–ª–∏ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n '
                                    
                                 '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∂–∏–∑–Ω–∏ –í–£–ó–∞, –Ω–∞–π–¥–µ—Ç–µ '
                                 '—Å–µ–±–µ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.\n\n'
                                    
                                 '–ö–Ω–æ–ø–∫–∞ ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å¬ª - –∑–∞–±–æ—Ç–∞ –∞ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ. –ù–µ –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–π—Ç–µ –ø–æ–º–æ—â—å—é '
                                 '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –°–æ–≤–º–µ—â–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é —É—á–µ–±—É, –¥—Ä—É–∑–µ–π –∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ. '
                                 '–ù–µ –ø–æ–∑–≤–æ–ª—å—Ç–µ –∏–º –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ –ú–ì–£!!!',
                         photo='https://kartinkof.club/uploads/posts/2022-06/1656094468_3-kartinkof-club-p-kartinki-s'
                               '-nadpisyu-pomogi-mne-3.jpg')
    await message.delete()


@dp.message_handler(text='üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
async def prep_command(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'{message.from_user.first_name}, '
                                f'–≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ '
                                f'–¥–Ω—è –∏–ª–∏ —É–∑–Ω–∞—Ç—å –µ–≥–æ/–µ–µ –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è '
                                f'–≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞',
                           reply_markup=prepodi_kb)
    await message.delete()


@dp.message_handler(text='üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def time_table_command(message: types.Message) -> None:
    await bot.send_photo(chat_id=message.from_user.id,
                         caption='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ –∑–∞–≤–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–∞–º –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –∏–º—è <b>–ø—Ä—è–º '
                                 '–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ</b> üßê'+'.\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä, <b>–ü—É–ø–∫–∏–Ω –í–∞—Å–∏–ª–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á</b>.',
                         photo='https://cs14.pikabu.ru/post_img/big/2022/03/08/7/1646737740129559994.jpg',
                         parse_mode='HTML')
    await message.delete()


@dp.message_handler(text='üîé–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã')
async def free_rooms_command(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'{message.from_user.first_name}, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–∞–±–∏–Ω–µ—Ç—ã '
                                f'—Å–≤–æ–±–æ–¥–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n–í–µ–¥—å —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç-–º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ '
                                f'–≤—Ä–µ–º—è —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏, –∑–∞–Ω–∏–º–∞—è—Å—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –≤–µ—â–∞–º–∏.\n\n'
                                f'–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—É—Å—Ç–æ–π –∫–∞–±–∏–Ω–µ—Ç',
                           parse_mode='HTML',
                           reply_markup=free_room_kb)
    await message.delete()


@dp.message_handler(text='üíÉ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
async def meropriatia_command(message: types.Message) -> None:
    await bot.send_photo(chat_id=message.from_user.id,
                         caption=f'{message.from_user.first_name}, –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ '
                                 f'–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ –æ—Ç –ª–∏—Ü–∞ –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ '
                                 f'–≠–§ –ú–ì–£, —Ç–∞–∫ –∏ –æ—Ç –ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.',
                         photo='https://static.tildacdn.com/tild6138-3431-4134-a566-393364393663/EFMSU_mag_edita'
                               'ble_G.jpg',
                         reply_markup=meropriatia_kb)
    await message.delete()


@dp.message_handler(text='üè†–ó–∞—è–≤–∫–∞ –≤ –î–ê–°')
async def das_command(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(*psychologist)
    kb.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–∞—Å',
                           parse_mode="HTML",
                           reply_markup=kb)


# –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≥—É–≥–ª —à–∏—Ç
@dp.message_handler(text='‚åõ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å')
async def google_sheet_command(message: types.Message):
    for val in buttons_values:
        if datetime.now() - timedelta(hours=16) > val:
            position_number = buttons_values.index(val)
            del buttons_keys[position_number]
            del buttons_values[position_number]
    await bot.send_photo(chat_id=message.from_user.id,
                         caption=f"üë©üèº –ü—Ä–∏–µ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Å—Ä–µ–¥–∞–º —Å 12:00 –¥–æ 14:00 (–∞—É–¥ 321)\n"
                                 f"–ù–∞ –±–µ—Å–µ–¥—É —Å –∫–∞–∂–¥—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤—ã–¥–µ–ª–µ–Ω–æ 50 –º–∏–Ω—É—Ç.\n\n"
                                 f"<b>–í–ê–ñ–ù–û</b>: –ø–æ–∫–∞ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Å–∏—Ö–æ–ª–æ–≥, –ß–∏–±–∏—Å–æ–≤–∞ –ü–æ–ª–∏–Ω–∞. "
                                 f"–ï—Å–ª–∏ –í—ã –∑–Ω–∞–∫–æ–º—ã —Å –Ω–µ–π –ª–∏—á–Ω–æ, –æ–Ω–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å –í–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. "
                                 f"–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ <b>–Ω–µ –Ω–∞–¥–æ</b> –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Ä–µ–º—è, "
                                 f"<b>–∑–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è</b>.\n\n"
                                 f"–£ –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ <b>2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏</b>. "
                                 f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º  –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∑–∂–µ, —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏."
                                 f"–ï—Å–ª–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É, "
                                 f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏</b> "
                                 f"–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å¬ª</b>"
                                 f", –∏–Ω–∞—á–µ –≤—Å—Ç—Ä–µ—á–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è "
                                 f"(–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å/–æ—Ç–º–µ–Ω—è—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞). "
                                 f"–ü—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è. <b>–ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!</b>",
                         photo='https://babr24.com/n2p/i/2021/1/21_1_5_2_05132453_b.jpg',
                         parse_mode="HTML")

    psychologist_keaboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    psychologist_keaboard.add(*psychologist)
    psychologist_keaboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è',
                           parse_mode="HTML",
                           reply_markup=psychologist_keaboard)

    await message.delete()


@dp.message_handler(text="–ü–æ–ª–∏–Ω–∞ –ß–∏–±–∏—Å–æ–≤–∞")
async def main_psychologist(message: types.Message):
    cell_list = worksheet.findall(str(message.from_user.id))
    amount_of_orders = len(cell_list)
    if amount_of_orders == 3:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message.from_user.full_name}, –¥–≤–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö '
                                    f'–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–ª–∏—Å—å.\n\n'
                                    f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–∏—à–∏—Ç–µ –Ω–∞ '
                                    f'–ø–æ—á—Ç—É <b>chibisova.polina@mail.ru</b>.',
                               parse_mode="HTML")
        list_for_google_sheet.clear()
        list_for_google_sheet.append(message.text)
        for key in list(buttons_dict.keys()):
            if datetime.now() - timedelta(hours=16) > buttons_dict[key]:
                del buttons_dict[key]
        keys = list(buttons_dict.keys())
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if len(keys) > 5:
            for i in range(0, 6):
                keyboard.add(keys[i])
        else:
            for i in range(0, len(keys)):
                keyboard.add(keys[i])
        keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
                               parse_mode="HTML",
                               reply_markup=keyboard)

    else:
        list_for_google_sheet.clear()
        list_for_google_sheet.append(message.text)
        for key in list(buttons_dict.keys()):
            if datetime.now() - timedelta(hours=16) > buttons_dict[key]:
                del buttons_dict[key]
        keys = list(buttons_dict.keys())
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if len(keys) > 5:
            for i in range(0, 6):
                keyboard.add(keys[i])
        else:
            for i in range(0, len(keys)):
                keyboard.add(keys[i])
        keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
                               parse_mode="HTML",
                               reply_markup=keyboard)


@dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è')
async def extra_pscychologist(message: types.Message):
    list_for_google_sheet.clear()
    list_for_google_sheet.append(message.text)
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
                           f"<b>–ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á –≠305</b>\n\n"
                           f"(–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)",
                           parse_mode="HTML")

    await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.message_handler(lambda message: message.text in buttons_dict.keys())
async def button_click(message: types.Message):
    end_date = str(buttons_dict[message.text]).split()[0]
    end_date_to_confirm = str(buttons_dict[message.text] + timedelta(hours=16))
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(job, trigger='cron', day_of_week='1,3,5',
                      hour=18, minute=30, end_date=end_date,
                      kwargs={'chat_id': message.from_user.id, 'users_name': message.from_user.full_name,
                              'session_date': message.text, 'kb': psychology_answer_kb})
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å', callback_data='end_my_session'))
    scheduler1 = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler1.add_job(feedback_message, trigger='date', run_date=end_date_to_confirm,
                       kwargs={'chat_id': message.from_user.id, 'users_name': message.from_user.full_name,
                               'kb': kb})
    scheduler.start()
    scheduler1.start()
    del buttons_dict[message.text]
    keys = list(buttons_dict.keys())
    if len(keys) >= 0:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(0, 6):
            if len(keys) - 1 >= 5:
                keyboard.add(keys[i])
            else:
                pass
        keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        list_for_google_sheet.append(message.text)
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
                                f"<b>–ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á –≠305</b>\n\n"
                                f"(–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)",
                           parse_mode="HTML")

    await message.delete()


@dp.message_handler()
async def take_user_name(m: types.Message) -> user_name:
    global user_name
    global full_name
    user_name = m.text.split()

    if len(user_name) == 3 and m.text.istitle():
        full_name = m.text
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞—Å –∑–æ–≤—É—Ç {m.text}',
                               reply_markup=take_user_name_kb)

    elif len(user_name) == 4 and user_name[0] == '–≥–¥–µ':
        teachers_name = str(user_name[1] + ' ' + user_name[2] + ' ' + user_name[3])
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'{m.from_user.first_name}, –≤–æ—Ç, –≥–¥–µ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è '
                                    f'<b>{teachers_name}</b>',
                               parse_mode='HTML')
        current_datetime = str(date.today())
        i = 0
        while i < len(sched_w_st):
            if current_datetime == sched_w_st[i]['date'] and teachers_name == sched_w_st[i]['teachers']:
                await bot.send_message(chat_id=m.from_user.id,
                                       text=f"<b>{sched_w_st[i]['place']}</b>\n<b>{sched_w_st[i]['time']}</b>\n"
                                            f"",
                                       parse_mode="HTML")
            i += 1

    elif len(user_name) == 4 and user_name[0] == '–ì–¥–µ':
        teachers_name = str(user_name[1] + ' ' + user_name[2] + ' ' + user_name[3])
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'{m.from_user.first_name}, –≤–æ—Ç, –≥–¥–µ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è '
                                    f'<b>{teachers_name}</b>',
                               parse_mode='HTML')
        current_datetime = str(date.today())
        i = 0
        while i < len(sched_w_st):
            if current_datetime == sched_w_st[i]['date'] and teachers_name == sched_w_st[i]['teachers']:
                await bot.send_message(chat_id=m.from_user.id,
                                       text=f"<b>{sched_w_st[i]['place']}</b>\n<b>{sched_w_st[i]['time']}</b>\n"
                                            f"",
                                       parse_mode="HTML")
            i += 1

    elif len(user_name) == 4 and user_name[0] == '–ø–æ—á—Ç–∞':
        teachers_name = str(user_name[1] + ' ' + user_name[2] + ' ' + user_name[3])
        i = 0
        while i < len(data_all_teachers_and_mails):
            if teachers_name in data_all_teachers_and_mails[i].values():
                await bot.send_message(chat_id=m.from_user.id,
                                       text=f"{m.from_user.first_name}, –≤–æ—Ç –ø–æ—á—Ç–∞"
                                            f": "
                                            f"<b>{data_all_teachers_and_mails[i]['mail']}</b>",
                                       parse_mode="HTML")
            i += 1

    elif len(user_name) == 4 and user_name[0] == '–ü–æ—á—Ç–∞':
        teachers_name = str(user_name[1] + ' ' + user_name[2] + ' ' + user_name[3])
        i = 0
        while i < len(data_all_teachers_and_mails):
            if teachers_name in data_all_teachers_and_mails[i].values():
                await bot.send_message(chat_id=m.from_user.id,
                                       text=f"{m.from_user.first_name}, –≤–æ—Ç –ø–æ—á—Ç–∞"
                                            f": "
                                            f"<b>{data_all_teachers_and_mails[i]['mail']}</b>",
                                       parse_mode="HTML")
            i += 1

    elif user_name[0] == "–≠—Ç–∞":
        photo = open('1.png', 'rb')
        await get_schedule(full_name)
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, {full_name}')
        await bot.send_photo(chat_id=m.from_user.id,
                             photo=photo)

    elif user_name[0] == "–°–ª–µ–¥—É—é—â–∞—è":
        photo = open('2.png', 'rb')
        await get_schedule(full_name)
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, {full_name}')
        await bot.send_photo(chat_id=m.from_user.id,
                             photo=photo)

    elif len(user_name) == 4 and m.text.istitle() and len(user_name[3]) == 4:
        user_tg_id = str(m.from_user.id)
        clients_name = str(user_name[0] + ' ' + user_name[1] + ' ' + user_name[2])
        group_number = str(user_name[3])
        list_for_google_sheet.append(user_tg_id)
        list_for_google_sheet.append(clients_name)
        list_for_google_sheet.append(group_number)
        await bot.send_message(chat_id=m.from_user.id,
                               text=f"–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É\n",
                               parse_mode="HTML")

    elif '@' in user_name[0] and '.' in user_name[0][user_name[0].find('@'):]:
        client_mail = str(user_name[0])
        current_time = datetime.now()
        list_for_google_sheet.append(str(current_time))
        list_for_google_sheet.append(client_mail)
        await bot.send_message(chat_id=m.from_user.id,
                               text=f"–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ.\n\n"
                                    f"<b>–≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥</b>.\n\n"
                                    f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 50 —Å–ª–æ–≤.",
                               parse_mode="HTML")

    elif len(user_name) > 5:
        description_of_the_problem = ""
        for i in range(0, len(user_name)):
            description_of_the_problem += str(user_name[i] + ' ')
        list_for_google_sheet.append(description_of_the_problem)
        if len(list_for_google_sheet) > 7:
            psychology_type = list_for_google_sheet[0]
            time_and_data_type = list_for_google_sheet[1]
            list_for_google_sheet.remove(psychology_type)
            list_for_google_sheet.remove(time_and_data_type)
            list_for_google_sheet.append(time_and_data_type)
            list_for_google_sheet.append(psychology_type)
        else:
            psychology_type = list_for_google_sheet[0]
            del list_for_google_sheet[0]
            list_for_google_sheet.append('None')
            list_for_google_sheet.append(psychology_type)
        list_for_google_sheet.append('.')
        list_for_google_sheet.append(int(1))
        worksheet.append_row(list_for_google_sheet)
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º!\n'
                                    f'–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:')
        await bot.send_message(chat_id=m.from_user.id,
                               text=f'<b>–§–ò–û</b>: {list_for_google_sheet[1]}\n'
                                    f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {list_for_google_sheet[2]}\n'
                                    f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {list_for_google_sheet[4]}\n'
                                    f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {list_for_google_sheet[5]}\n'
                                    f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {list_for_google_sheet[6]}',
                               parse_mode="HTML",
                               reply_markup=psychology_answer_kb)

        await bot.send_message(chat_id=683092826,
                               text=f'<b>–§–ò–û</b>: {list_for_google_sheet[1]}\n'
                                    f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {list_for_google_sheet[2]}\n'
                                    f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {list_for_google_sheet[4]}\n'
                                    f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {list_for_google_sheet[5]}\n'
                                    f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {list_for_google_sheet[6]}',
                               parse_mode="HTML")

        if list_for_google_sheet[7] == '–ü–æ–ª–∏–Ω–∞ –ß–∏–±–∏—Å–æ–≤–∞':
            await bot.send_message(chat_id=739380400,
                                   text=f'–£–≤–∞–∂–∞–µ–º–∞—è –ü–æ–ª–∏–Ω–∞, –∫ –≤–∞–º –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫.\n'
                                        f'–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ:')
            await bot.send_message(chat_id=739380400,
                                   text=f'<b>–§–ò–û</b>: {list_for_google_sheet[1]}\n'
                                        f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {list_for_google_sheet[2]}\n'
                                        f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {list_for_google_sheet[4]}\n'
                                        f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {list_for_google_sheet[5]}\n'
                                        f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {list_for_google_sheet[6]}',
                                   parse_mode="HTML")

    return user_name


@dp.callback_query_handler()
async def incorrect_name_func(callback: types.CallbackQuery) -> None:
    telegram_user_name = callback.from_user.first_name
    if callback.data == 'incorrect_name':
        await callback.message.edit_text(text='–ü–æ–ø—Ä–æ–±—É–π  –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è –µ—â–µ —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –¥–∞–≤–∞–π –±–µ–∑ –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ—Ç —Ä–∞–∑\n' +
                                              'üëâüëà')
    elif callback.data == 'correct_name':
        await callback.message.edit_text(text=f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, —Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ "
                                              f"–∫–Ω–æ–ø–∫—É:\n"
                                              f" <b>¬´–≠—Ç–∞¬ª</b>.\n\n"
                                              f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, —Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ "
                                              f"–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É:\n<b>¬´–°–ª–µ–¥—É—é—â–∞—è¬ª</b>.\n\n",
                                         parse_mode="HTML",
                                         reply_markup=pic_keyboard)

    elif callback.data == 'where_is_he':
        list_of_teachers_to_find = []
        for item in final_data_of_teachers_to_find:
            try:
                if item['teachers'] not in list_of_teachers_to_find:
                    list_of_teachers_to_find.append(item['teachers'])
                else:
                    pass
            except IndentationError:
                print(f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞')

        counter_1 = 0
        counter_2 = 0
        kb = InlineKeyboardMarkup()
        lst = []
        for i in sorted(list_of_teachers_to_find):
            try:
                counter_1 += 1
                if counter_1 < 29:
                    lst.append(i)
                elif counter_1 == 29:
                    counter_2 += 1
                    if lst[0][0] != lst[-1][0]:
                        btn = InlineKeyboardButton(text=f'–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã {lst[0][0]}-{lst[-1][0]}',
                                                   callback_data=f'teachers_second_name_to_find_{counter_2}')
                        kb.add(btn)
                        lst = []
                        counter_1 = 0
                    elif lst[0][0] == lst[-1][0]:
                        btn = InlineKeyboardButton(text=f'–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—É {lst[0][0]}',
                                                   callback_data=f'teachers_second_name_to_find_{counter_2}')
                        kb.add(btn)
                        lst = []
                        counter_1 = 0
            except StopIteration:
                print(f'–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏')

        await callback.message.edit_text(text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {telegram_user_name}, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è '
                                              f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å '
                                              f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É, –Ω–∞ '
                                              f'–∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –µ–≥–æ —Ñ–∞–º–∏–ª–∏—è.',
                                         parse_mode='HTML',
                                         reply_markup=kb)

    elif 'teachers_second_name_to_find_' in callback.data:
        kb = InlineKeyboardMarkup()
        list_of_teachers_to_find = []
        for item in final_data_of_teachers_to_find:
            try:
                if item['teachers'] not in list_of_teachers_to_find:
                    list_of_teachers_to_find.append(item['teachers'])
                else:
                    pass
            except StopIteration:
                print(f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞')

        list_of_teachers_to_find = sorted(list_of_teachers_to_find)

        try:
            if callback.data[-1] == str(1):
                for name in list_of_teachers_to_find[:29]:
                    btn = InlineKeyboardButton(text=f'{name}', callback_data=f'{dict_of_teachers[name]}')
                    kb.add(btn)
            elif callback.data[-1] != 1 and len(callback.data) == 30:
                i = int(callback.data[-1])
                for name in list_of_teachers_to_find[29 * (i - 1):29 * i]:
                    btn = InlineKeyboardButton(text=f'{name}', callback_data=f'{dict_of_teachers[name]}')
                    kb.add(btn)
            else:
                i = int(callback.data[29:31])
                for name in list_of_teachers_to_find[29 * (i - 1):29 * i]:
                    btn = InlineKeyboardButton(text=f'{name}', callback_data=f'{dict_of_teachers[name]}')
                    kb.add(btn)
        except StopIteration:
            print(f'–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏')

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∏–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ '
                                    f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                               parse_mode="HTML",
                               reply_markup=kb)

    elif callback.data in dict_of_teachers.values():
        reversed_dict = {}
        for key, val in dict_of_teachers.items():
            reversed_dict[val] = key
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.first_name}, –≤–æ—Ç, –≥–¥–µ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è '
                                    f'<b>{reversed_dict[callback.data]}</b>\n\n'
                                    f'<b>–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∞ '
                                    f'—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ</b>.',
                               parse_mode='HTML')

        def convert_to_datetime(date_string):  ### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            try:
                datetime_obj = datetime.strptime(date_string, "%Y-%m-%dT%H:%M:%S")
                datetime_obj = datetime_obj.strftime("%Y-%m-%d")
                return datetime_obj
            except ValueError:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")

        teachers_name = reversed_dict[callback.data]
        print(teachers_name)
        current_date = datetime.now().strftime("%Y-%m-%d")
        counter = 0
        try:
            while counter < len(final_data_of_teachers_to_find):
                if teachers_name == final_data_of_teachers_to_find[counter]['teachers']:
                    if current_date == convert_to_datetime(final_data_of_teachers_to_find[counter]['date']):
                        if final_data_of_teachers_to_find[counter]['place'] is not None \
                                and final_data_of_teachers_to_find[counter]['time'] is not None:
                            await bot.send_message(chat_id=callback.from_user.id,
                                                   text=f"<b>{final_data_of_teachers_to_find[counter]['place']}"
                                                        f"</b>\n<b>{final_data_of_teachers_to_find[counter]['time']}"
                                                        f"</b>\n"
                                                        f"",
                                                   parse_mode="HTML")
                        else:
                            await bot.send_message(chat_id=callback.from_user.id,
                                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, '
                                                        f'{reversed_dict[callback.data]} –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ.')
                            print(f"{final_data_of_teachers_to_find[counter]['place']}, "
                                  f"{final_data_of_teachers_to_find[counter]['time']}")
                counter += 1

        except StopIteration:
            print(f'–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏')

    elif callback.data == 'prepod_email':
        btn = [
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ê-–í", callback_data='second_name_A'), ### –ø–µ—Ä–≤–≤—ã–µ 21 —ç–ª–µ–º–µ–Ω–∏–æ–≤
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –í-–ò", callback_data='second_name_BV'), ### —Å 21 –ø–æ 50
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ò-–ö", callback_data='second_name_GD'), ### —Å 51 –ø–æ 80
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ö-–ú", callback_data='second_name_EI'), ### —Å 81 –ø–æ 105
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ú-–ü", callback_data='second_name_K'), ### —Å 106 –ø–æ 135
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ü-–°", callback_data='second_name_KL'), ### `—Å 136 –ø–æ 165
            InlineKeyboardButton(text='–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –°-–ß', callback_data='second_name_LM'), ### —Å 166 –ø–æ 195
            InlineKeyboardButton(text='–§–∞–º–∏–ª–∏–∏ –Ω–∞ –±—É–∫–≤—ã –ß-–≠', callback_data='second_name_M') ###—Å 196 –ø–æ 202
        ]
        kb = InlineKeyboardMarkup()
        for i in range(len(btn)):
            kb.add(btn[i])
        await callback.message.edit_text(text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {telegram_user_name}, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å '
                                              f'–ø–æ—á—Ç—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å '
                                              f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É, –Ω–∞ '
                                              f'–∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –µ–≥–æ —Ñ–∞–º–∏–ª–∏—è.',
                                         parse_mode='HTML',
                                         reply_markup=kb)

    elif callback.data == 'second_name_A':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            if counter <= 21:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)
                counter += 1

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_BV':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 21 and counter <= 50:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_GD':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 51 and counter <= 80:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_EI':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 80 and counter <= 105:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_K':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 105 and counter <= 135:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_KL':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 135 and counter <= 165:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_LM':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 165 and counter <= 191:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data == 'second_name_M':
        counter = 0
        kb = InlineKeyboardMarkup()
        for key, val in teachers_dict_1.items():
            counter += 1
            if counter > 191 and counter <= 202:
                btn = InlineKeyboardButton(text=f'{key}', callback_data=f'{val}')
                kb.add(btn)

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á—Ç—É '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –µ–≥–æ –∏–º—è.',
                               reply_markup=kb)

    elif callback.data in teachers_dict_1.values():
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –≤–æ—Ç <b>–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>, '
                                    f'–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å '
                                    f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: <b>{callback.data}</b>.\n\n'
                                    f'–ë—É–¥—å—Ç–µ <b>–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω—ã–º–∏</b> —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ <b>–Ω–µ –ø–∏—à–∏—Ç–µ</b> –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º'
                                    f' <b>–≤ –Ω–æ—á–∏</b>!',
                               parse_mode="HTML",
                               reply_markup=kb_main)

    elif callback.data == 'first_pair':
        current_time = '09:00-10:30'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>–ø–µ—Ä–≤–æ–π "
                                              f"–ø–∞—Ä–µ</b>: \n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'second_pair':
        current_time = '10:40-12:10'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                            list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                            list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                            list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                            list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                            list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>–≤—Ç–æ—Ä–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                              )

    elif callback.data == 'third_pair':
        current_time = '12:20-13:50'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>—Ç—Ä–µ—Ç—å–µ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'forth_pair':
        current_time = '14:00-15:30'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>—á–µ—Ç–≤–µ—Ä—Ç–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'fifth_pair':
        current_time = '15:40-17:10'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>–ø—è—Ç–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'six_pair':
        current_time = '17:20-18:50'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>—à–µ—Å—Ç–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'seventh_pair':
        current_time = '18:55-20:25'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>—Å–µ–¥—å–º–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'eight_pair':
        current_time = '20:30-22:00'
        current_date = str(date.today())
        for i in range(len(sched_w_st)):
            if sched_w_st[i]['date'] == current_date and sched_w_st[i]['time'] == current_time:
                if sched_w_st[i]['place'].startswith('1') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_first_flour:
                    list_of_kabs_first_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('2') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_second_flour:
                    list_of_kabs_second_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('3') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_third_flour:
                    list_of_kabs_third_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('4') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fourth_flour:
                    list_of_kabs_fourth_flour.remove(str(sched_w_st[i]['place']))
                elif sched_w_st[i]['place'].startswith('5') and str(sched_w_st[i]['place']) in \
                        list_of_kabs_fith_flour:
                    list_of_kabs_fith_flour.remove(str(sched_w_st[i]['place']))

        await callback.message.edit_text(text=f"{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ <b>–≤–æ—Å—å–º–æ–π "
                                              f"–ø–∞—Ä–µ</b>:\n\n"
                                              f"<b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b>: \n{', '.join(map(str, list_of_kabs_first_flour))}\n",
                                         parse_mode='HTML')
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_second_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_third_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fourth_flour))}\n",
                               )
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"–ü—è—Ç—ã–π —ç—Ç–∞–∂: \n{', '.join(map(str, list_of_kabs_fith_flour))}\n",
                               )

    elif callback.data == 'official':
        await callback.message.answer(text=f'{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç '
                                           f'<b>–ú–ì–£</b>:',
                                      parse_mode='HTML')
        df = pd.read_excel('Chill_timetable.xlsx', sheet_name='–õ–∏—Å—Ç1')
        for i, row in df.iterrows():
            if row['Activity'] != 'Nothing':
                await bot.send_message(chat_id=callback.from_user.id,
                                       text=f"{row['Data']} ({row['Weekday']}) - {row['Activity']}")

    elif callback.data == 'unofficial':
        await callback.message.answer(text=f'{telegram_user_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –Ω–∞—à–∏ '
                                           f'<b>—Å—Ç—É–¥–µ–Ω—Ç—ã</b>:',
                                      parse_mode='HTML')
        await callback.message.answer(text=f'–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –Ω–µ—Ç')

    elif callback.data == 'this':
        await callback.message.edit_reply_markup(reply_markup=None)

        photo = open('1.png', 'rb')
        await get_schedule(full_name)
        await bot.send_message(chat_id=callback.message.chat.id,
                               text=f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, {full_name}')
        await bot.send_photo(chat_id=callback.message.chat.id,
                             photo=photo)

    elif callback.data == 'next':
        await callback.message.edit_reply_markup(reply_markup=None)

        photo = open('2.png', 'rb')
        await get_schedule(full_name)
        await bot.send_message(chat_id=callback.message.chat.id,
                               text=f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, {full_name}')
        await bot.send_photo(chat_id=callback.message.chat.id,
                             photo=photo)

    elif callback.data == 'cancel_order':
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å '
                                    f'–≤—Å—Ç—Ä–µ—á—É —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º?',
                               parse_mode="HTML",
                               reply_markup=psychology_order_confirmation_kb)

    elif callback.data == 'free_orders':
        cell_list = worksheet.findall(str(callback.from_user.id))
        amount_of_orders = len(cell_list)
        if amount_of_orders == 1:
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–£–≤–≤–∞–∂–≤–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, —É –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å —Ä–æ–≤–Ω–æ '
                                        f'<b>{amount_of_orders}</b> –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.',
                                   parse_mode="HTML")
        else:
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, —É –≤–∞—Å <b>–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å</b> '
                                        f'–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –¥–≤–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö '
                                        f'–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–ª–∏—Å—å, '
                                        f'–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–∏—à–∏—Ç–µ –Ω–∞ '
                                        f'–ø–æ—á—Ç—É <b>chibisova.polina@mail.ru</b>',
                                   parse_mode="HTML",
                                   reply_markup=kb_main)

        await callback.message.delete()

    elif callback.data == 'accidentally_clicked':
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞) <b>{callback.from_user.full_name}</b>, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å'
                                    f' –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å',
                               parse_mode="HTML",
                               reply_markup=kb_main)
        await callback.message.delete()

    elif callback.data == 'trully_cancel_order':
        await callback.message.delete()
        cell_list = worksheet.findall(str(callback.from_user.id))
        row_number = cell_list[-1].row
        column_number = cell_list[-1].col
        student_name = worksheet.cell(row_number, column_number + 1).value
        student_group = worksheet.cell(row_number, column_number + 2).value
        student_email = worksheet.cell(row_number, column_number + 4).value
        student_problem = worksheet.cell(row_number, column_number + 5).value
        student_meeting_data = str(worksheet.cell(row_number, column_number + 6).value)
        if datetime.now() <= buttons_dict_copy[student_meeting_data] - timedelta(hours=24):
            worksheet.update_cell(row_number, column_number + 8, f'–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ {datetime.now()} —Ä–∞–Ω—å—à–µ, '
                                                                 f'—á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏. –ù–∏–∫–∞–∫–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç.')
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <b>{callback.from_user.full_name}</b>, –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ '
                                        f'–≤—Å—Ç—Ä–µ—á—É.\n\n'
                                        f'–®—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –æ—Ç–º–µ–Ω—É —É –≤–∞—Å <b>–Ω–µ—Ç</b>. \n\n'
                                        f'–ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.',
                                   parse_mode="HTML",
                                   reply_markup=kb_main)

            await bot.send_message(chat_id=739380400,
                                   text=f'–£–≤–∞–∂–∞–µ–º–∞—è –ü–æ–ª–∏–Ω–∞, –¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ <b>–æ—Ç–∫–∞–∑–∞–ª—Å—è</b> –æ—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏.\n'
                                        f'–®—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –æ—Ç–º–µ–Ω—É —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞ 24 —á–∞—Å–∞ –¥–æ '
                                        f'–≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏\n'
                                        f'–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ:',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=739380400,
                                   text=f'<b>–§–ò–û</b>: {student_name}\n'
                                        f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {student_group}\n'
                                        f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {student_email}\n'
                                        f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {student_problem}\n'
                                        f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {student_meeting_data}',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=683092826,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π –î–º–∏—Ç—Ä–∏–π, –¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ <b>–æ—Ç–∫–∞–∑–∞–ª—Å—è</b> –æ—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏.\n'
                                        f'–®—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –æ—Ç–º–µ–Ω—É —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞ 24 —á–∞—Å–∞ –¥–æ '
                                        f'–≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏\n'
                                        f'–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ:',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=683092826,
                                   text=f'<b>–§–ò–û</b>: {student_name}\n'
                                        f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {student_group}\n'
                                        f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {student_email}\n'
                                        f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {student_problem}\n'
                                        f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {student_meeting_data}',
                                   parse_mode="HTML")

            for i in range(0, 10):
                worksheet.update_cell(row_number, column_number + i, '')

        else:
            worksheet.update_cell(row_number, column_number + 8, f'–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ {datetime.now()} –ø–æ–∑–∂–µ, '
                                                                 f'—á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏. –ï—Å—Ç—å —à—Ç—Ä–∞—Ñ')

            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <b>{callback.from_user.full_name}</b>, –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ '
                                        f'–≤—Å—Ç—Ä–µ—á—É.\n\n'
                                        f'–£ –≤–∞—Å <b>–µ—Å—Ç—å</b> —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–º–µ–Ω—É –≤—Å—Ç—Ä–µ—á–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ç–º–µ–Ω—É –Ω–∞–¥–æ '
                                        f'–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 24 —á–∞—Å–∞! \n\n'
                                        f'–ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.',
                                   parse_mode="HTML",
                                   reply_markup=kb_main)

            await bot.send_message(chat_id=739380400,
                                   text=f'–£–≤–∞–∂–∞–µ–º–∞—è –ü–æ–ª–∏–Ω–∞, –¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ <b>–æ—Ç–∫–∞–∑–∞–ª—Å—è</b> –æ—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏.\n'
                                        f'–£ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–º–µ–Ω—É, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 '
                                        f'—á–∞—Å–∞ –¥–æ '
                                        f'–≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏\n'
                                        f'–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ:',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=739380400,
                                   text=f'<b>–§–ò–û</b>: {student_name}\n'
                                        f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {student_group}\n'
                                        f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {student_email}\n'
                                        f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {student_problem}\n'
                                        f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {student_meeting_data}',
                                   parse_mode="HTML")

            await bot.send_message(chat_id=683092826,
                                   text=f'–£–≤–∞–∂–∞–µ–º—ã–π –î–º–∏—Ç—Ä–∏–π, –¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ <b>–æ—Ç–∫–∞–∑–∞–ª—Å—è</b> –æ—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏.\n'
                                        f'–£ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–º–µ–Ω—É, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 '
                                        f'—á–∞—Å–∞ –¥–æ '
                                        f'–≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏\n'
                                        f'–í–æ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ:',
                                   parse_mode="HTML")
            await bot.send_message(chat_id=683092826,
                                   text=f'<b>–§–ò–û</b>: {student_name}\n'
                                        f'<b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>: {student_group}\n'
                                        f'<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b>: {student_email}\n'
                                        f'<b>–ü—Ä–æ–±–ª–µ–º–∞</b>: {student_problem}\n'
                                        f'<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>: {student_meeting_data}',
                                   parse_mode="HTML")

    elif callback.data == 'end_my_session':
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {callback.from_user.full_name}, –≤—ã <b>–∑–∞–≤–µ—Ä—à–∏–ª–∏ '
                                    f'–≤—Å—Ç—Ä–µ—á—É</b> —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n\n'
                                    f'–ú—ã –Ω–∞–¥–µ–µ–º—Å—è –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ <b>–∂–µ–ª–∞–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</b>',
                               parse_mode="HTML",
                               reply_markup=kb_main)

        await callback.message.delete()


if __name__ == '__main__':
    executor.start_polling(dp,
                           on_startup=on_startup,
                           skip_updates=True)


